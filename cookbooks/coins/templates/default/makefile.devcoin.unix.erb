# Copyright (c) 2009-2010 Satoshi Nakamoto
# Distributed under the MIT/X11 software license, see the accompanying
# file license.txt or http://www.opensource.org/licenses/mit-license.php.

CXX=g++

DEFS=-DUSE_IPV6 -DBOOST_SPIRIT_THREADSAFE

BOOST_LIB_PATH=<%= node[:walletserver][:root] %>/lib
BDB_LIB_PATH=<%= node[:walletserver][:root] %>/lib
OPENSSL_LIB_PATH=<%= node[:walletserver][:root] %>/openssl/lib
BOOST_INCLUDE_PATH=<%= node[:walletserver][:root] %>/include/boost
BDB_INCLUDE_PATH=<%= node[:walletserver][:root] %>/include
OPENSSL_INCLUDE_PATH=<%= node[:walletserver][:root] %>/include/openssl

DEFS += $(addprefix -I,$(CURDIR) $(CURDIR)/obj $(BOOST_INCLUDE_PATH) $(BDB_INCLUDE_PATH) $(OPENSSL_INCLUDE_PATH) <%= node[:walletserver][:cppflags] %>) -DNOPCH -DUSE_SSL
LIBS = $(addprefix -L,$(BOOST_LIB_PATH) $(BDB_LIB_PATH) $(OPENSSL_LIB_PATH) <%= node[:walletserver][:ldflags] %>)

WXINCLUDEPATHS=$(shell wx-config --cxxflags)

WXLIBS=$(shell wx-config --libs)

#USE_UPNP:=0

# for boost 1.37, add -mt to the boost libraries
LIBS+= \
 -Wl,-Bstatic \
   -l boost_system$(BOOST_LIB_SUFFIX) \
   -l boost_filesystem$(BOOST_LIB_SUFFIX) \
   -l boost_program_options$(BOOST_LIB_SUFFIX) \
   -l boost_thread$(BOOST_LIB_SUFFIX) \
   -l db_cxx$(BDB_LIB_SUFFIX) \
   -l ssl -l tcmalloc_minimal \
   -l crypto

ifdef USE_UPNP
	LIBS += -l miniupnpc
	DEFS += -DUSE_UPNP=$(USE_UPNP)
endif

LIBS+= \
 -Wl,-Bdynamic \
   -l gthread-2.0 \
   -l z \
   -l dl \
   -l pthread -l tcmalloc_minimal \
   -l curl

# Hardening
# Make some classes of vulnerabilities unexploitable in case one is discovered.
#
    # This is a workaround for Ubuntu bug #691722, the default -fstack-protector causes
    # -fstack-protector-all to be ignored unless -fno-stack-protector is used first.
    # see: https://bugs.launchpad.net/ubuntu/+source/gcc-4.5/+bug/691722
    HARDENING=-fno-stack-protector

    # Stack Canaries
    # Put numbers at the beginning of each stack frame and check that they are the same.
    # If a stack buffer if overflowed, it writes over the canary number and then on return
    # when that number is checked, it won't be the same and the program will exit with
    # a "Stack smashing detected" error instead of being exploited.
    HARDENING+=-fstack-protector-all -Wstack-protector

    # Make some important things such as the global offset table read only as soon as
    # the dynamic linker is finished building it. This will prevent overwriting of addresses
    # which would later be jumped to.
    HARDENING+=-Wl,-z,relro -Wl,-z,now

    # Build position independent code to take advantage of Address Space Layout Randomization
    # offered by some kernels.
    # see doc/build-unix.txt for more information.
    ifdef PIE
        HARDENING+=-fPIE -pie
    endif

    # -D_FORTIFY_SOURCE=2 does some checking for potentially exploitable code patterns in
    # the source such overflowing a statically defined buffer.
    HARDENING+=-D_FORTIFY_SOURCE=2
#


DEBUGFLAGS=-g -D__WXDEBUG__
CXXFLAGS=-O2 -Wno-invalid-offsetof -Wformat $(DEBUGFLAGS) $(DEFS) $(HARDENING)
HEADERS = \
    auxpow.h \
    base58.h \
    bignum.h \
    crypter.h \
    db.h \
    headers.h \
    init.h \
    irc.h \
    key.h \
    keystore.h \
    main.h \
    net.h \
    noui.h \
    receiver.h \
    protocol.h \
    rpc.h \
    script.h \
    serialize.h \
    strlcpy.h \
    ui.h \
    uibase.h \
    uint256.h \
    util.h \
    wallet.h

OBJS= \
    obj/auxpow.o \
    obj/crypter.o \
    obj/db.o \
    obj/init.o \
    obj/irc.o \
    obj/keystore.o \
    obj/main.o \
    obj/net.o \
    obj/protocol.o \
    obj/rpc.o \
    obj/script.o \
    obj/util.o \
    obj/wallet.o


all: devcoind


obj/%.o: %.cpp $(HEADERS)
	$(CXX) -c $(CXXFLAGS) $(WXINCLUDEPATHS) -DGUI -o $@ $<

devcoin: $(OBJS) obj/ui.o obj/uibase.o
	$(CXX) $(CXXFLAGS) -o $@ $^ $(WXLIBS) $(LIBS)

obj/nogui/%.o: %.cpp $(HEADERS)
	$(CXX) -c $(CXXFLAGS) -o $@ $<

devcoind: $(OBJS:obj/%=obj/nogui/%)
	$(CXX) $(CXXFLAGS) -o $@ $^ $(LIBS)

obj/test/test_devcoin.o: $(wildcard test/*.cpp) $(HEADERS)
	$(CXX) -c $(CFLAGS) -o $@ test/test_devcoin.cpp

test_devcoin: obj/test/test_devcoin.o $(filter-out obj/nogui/init.o,$(OBJS:obj/%=obj/nogui/%))
	$(CXX) $(CXXFLAGS) -o $@ $(LIBPATHS) $^ -Wl,-Bstatic -lboost_unit_test_framework $(LIBS)

clean:
	-rm -f devcoin devcoind test_devcoin
	-rm -f obj/*.o
	-rm -f obj/nogui/*.o
	-rm -f obj/test/*.o
	-rm -f headers.h.gch
